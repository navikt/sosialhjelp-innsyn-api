name: Build and deploy to prod
on:
  push:
    branches:
      - "master"

# FIXME: Legg til docker layer caching, f.eks. https://github.com/marketplace/actions/build-docker-images-using-cache
jobs:
  create-tag:
    name: Get git tag for commit
    runs-on: ubuntu-latest
    outputs:
      is_first_run: ${{ steps.check-tag.outputs.first_run }}
      artifact_version: ${{ steps.artifact-version.outputs.version }}
    steps:
      - uses: actions/checkout@v1
      - name: Create artifact version
        id: artifact-version
        uses: navikt/sosialhjelp-ci/actions/create-artifact-version@master
      - name: Check if tag exists
        id: check-tag
        shell: bash
        run: |
          TAG_EXISTS_OUTPUT=$(git tag --list ${{ steps.artifact-version.outputs.version }})
          ARTIFACT=${{ steps.artifact-version.outputs.version }}
          if [ "$TAG_EXISTS_OUTPUT" == "$ARTIFACT" ] ; then
              echo "::set-output name=first_run::${{ false }}"
          else
              echo "::set-output name=first_run::${{ true }}"
          fi

  build:
    name: Build and push docker image
    needs: create-tag
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.docker-tag.outputs.image_tag }}
    env:
      IS_FIRST_RUN: ${{ needs.create-tag.outputs.is_first_run }}
      ARTIFACT_VERSION: ${{ needs.create-tag.outputs.artifact_version }}
      DOCKER_IMAGE: docker.pkg.github.com/${{ github.repository }}/${{ github.event.repository.name }}
    steps:
      - name: Setup java
        if: env.IS_FIRST_RUN == 'true'
        uses: actions/setup-java@v1
        with:
          java-version: '11.x'
      - uses: actions/checkout@v1
      - uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: ${{ runner.os }}-gradle-
      - name: Run tests
        if: env.IS_FIRST_RUN == 'true'
        run: ./gradlew test
        env:
          ORG_GRADLE_PROJECT_githubUser: x-access-token
          ORG_GRADLE_PROJECT_githubPassword: ${{ secrets.GITHUB_TOKEN }}
      - name: Build JAR
        if: env.IS_FIRST_RUN == 'true'
        run: ./gradlew clean shadowJar -x test
        env:
          ORG_GRADLE_PROJECT_githubUser: x-access-token
          ORG_GRADLE_PROJECT_githubPassword: ${{ secrets.GITHUB_TOKEN }}
      - name: Login to GitHub package registry
        if: env.IS_FIRST_RUN == 'true'
        run: |
          echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_REPOSITORY} --password-stdin docker.pkg.github.com
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create docker image tags
        run: |
          echo "DOCKER_TAG=${{ env.DOCKER_IMAGE }}:${{ env.ARTIFACT_VERSION }}" >> $GITHUB_ENV
      - name: Create tag and release
        if: env.IS_FIRST_RUN == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.ARTIFACT_VERSION }}
          release_name: ${{ env.ARTIFACT_VERSION }}
          commitish: ${{ github.sha }}
      - name: Build docker image
        if: env.IS_FIRST_RUN == 'true'
        run: docker build -t ${{ env.DOCKER_TAG }} .
      - name: Push docker image
        if: env.IS_FIRST_RUN == 'true'
        run: |
          docker push ${{ env.DOCKER_TAG }}
      - name: output docker image tag
        id: docker-tag
        run: |
          echo "::set-output name=image_tag::${{ env.DOCKER_TAG }}"

  deploy:
    name: Deploy to prod-sbs
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          RESOURCE: nais/nais.yaml
          CLUSTER: prod-sbs
          VARS: nais/prod/default.json
          REF: ${{ github.sha }}
          PRINT_PAYLOAD: true
          IMAGE: ${{ needs.build.outputs.image_tag }}
